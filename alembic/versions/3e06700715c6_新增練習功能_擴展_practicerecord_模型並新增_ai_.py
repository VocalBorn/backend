"""新增練習功能 擴展 PracticeRecord 模型並新增 AI 分析和回饋功能

Revision ID: 3e06700715c6
Revises: 775631cb8e1e
Create Date: 2025-07-17 03:44:37.859427

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '3e06700715c6'
down_revision: Union[str, None] = '775631cb8e1e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create enum types first
    op.execute("CREATE TYPE practicestatus AS ENUM ('IN_PROGRESS', 'COMPLETED', 'AI_QUEUED', 'AI_PROCESSING', 'AI_ANALYZED', 'ANALYZED')")
    
    op.create_table('ai_analysis_queue',
    sa.Column('queue_id', sa.Uuid(), nullable=False),
    sa.Column('practice_record_id', sa.Uuid(), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='aianalysispriority'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', name='aianalysisqueuestatus'), nullable=False),
    sa.Column('queued_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('actual_duration', sa.Integer(), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('worker_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['practice_record_id'], ['practice_records.practice_record_id'], ),
    sa.PrimaryKeyConstraint('queue_id'),
    sa.UniqueConstraint('practice_record_id')
    )
    op.create_table('practice_feedbacks',
    sa.Column('feedback_id', sa.Uuid(), nullable=False),
    sa.Column('practice_record_id', sa.Uuid(), nullable=False),
    sa.Column('therapist_id', sa.Uuid(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pronunciation_accuracy', sa.Float(), nullable=True),
    sa.Column('suggestions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('based_on_ai_analysis', sa.Boolean(), nullable=False),
    sa.Column('ai_analysis_reviewed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['practice_record_id'], ['practice_records.practice_record_id'], ),
    sa.ForeignKeyConstraint(['therapist_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('feedback_id'),
    sa.UniqueConstraint('practice_record_id')
    )
    op.create_table('ai_analysis_results',
    sa.Column('result_id', sa.Uuid(), nullable=False),
    sa.Column('queue_id', sa.Uuid(), nullable=False),
    sa.Column('practice_record_id', sa.Uuid(), nullable=False),
    sa.Column('ai_model_version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pronunciation_accuracy', sa.Float(), nullable=True),
    sa.Column('fluency_score', sa.Float(), nullable=True),
    sa.Column('rhythm_score', sa.Float(), nullable=True),
    sa.Column('tone_score', sa.Float(), nullable=True),
    sa.Column('overall_score', sa.Float(), nullable=True),
    sa.Column('detailed_analysis', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('phoneme_analysis', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('word_analysis', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ai_suggestions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('improvement_areas', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('reliability_score', sa.Float(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['practice_record_id'], ['practice_records.practice_record_id'], ),
    sa.ForeignKeyConstraint(['queue_id'], ['ai_analysis_queue.queue_id'], ),
    sa.PrimaryKeyConstraint('result_id'),
    sa.UniqueConstraint('practice_record_id'),
    sa.UniqueConstraint('queue_id')
    )
    op.add_column('practice_records', sa.Column('audio_duration', sa.Float(), nullable=True))
    op.add_column('practice_records', sa.Column('file_size', sa.Integer(), nullable=True))
    op.add_column('practice_records', sa.Column('content_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('practice_records', sa.Column('practice_status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'AI_QUEUED', 'AI_PROCESSING', 'AI_ANALYZED', 'ANALYZED', name='practicestatus'), nullable=False))
    op.add_column('practice_records', sa.Column('begin_time', sa.DateTime(), nullable=True))
    op.add_column('practice_records', sa.Column('end_time', sa.DateTime(), nullable=True))
    op.add_column('practice_records', sa.Column('updated_at', sa.DateTime(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('practice_records', 'updated_at')
    op.drop_column('practice_records', 'end_time')
    op.drop_column('practice_records', 'begin_time')
    op.drop_column('practice_records', 'practice_status')
    op.drop_column('practice_records', 'content_type')
    op.drop_column('practice_records', 'file_size')
    op.drop_column('practice_records', 'audio_duration')
    op.drop_table('ai_analysis_results')
    op.drop_table('practice_feedbacks')
    op.drop_table('ai_analysis_queue')
    # ### end Alembic commands ###
