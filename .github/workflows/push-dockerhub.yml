name: CI/CD Pipeline

on:
  push:
    # 任何分支的推送都會觸發測試
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 單元測試 Job - 在所有分支的推送都會執行
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display workflow info
        run: |
          echo "=== VocalBorn CI/CD Pipeline ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Jobs that will run:"
          echo "✅ Unit Tests (always)"
          echo "✅ Code Quality Check (always)"
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "🐳 Docker Build & Push (main branch only)"
          else
            echo "⏭️  Docker Build & Push (skipped - not main branch push)"
          fi

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment
        run: |
          # 建立測試環境變數
          echo "SECRET_KEY=test-secret-key-for-development-only-do-not-use-in-production" >> $GITHUB_ENV
          echo "EMAIL_API_URL=http://localhost:8080/api/email" >> $GITHUB_ENV
          echo "EMAIL_API_TOKEN=test-email-api-token" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///test_vocalborn.db" >> $GITHUB_ENV
          echo "BASE_URL=http://localhost:8000" >> $GITHUB_ENV
          echo "JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
          echo "JWT_REFRESH_TOKEN_EXPIRE_DAYS=7" >> $GITHUB_ENV
          echo "JWT_ALGORITHM=HS256" >> $GITHUB_ENV
          echo "EMAIL_VERIFICATION_EXPIRE_HOURS=24" >> $GITHUB_ENV
          echo "PASSWORD_RESET_EXPIRE_HOURS=1" >> $GITHUB_ENV
          echo "PAIRING_TOKEN_DEFAULT_EXPIRE_HOURS=24" >> $GITHUB_ENV
          echo "PAIRING_TOKEN_DEFAULT_MAX_USES=5" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          echo "DEBUG=true" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          # 執行單元測試（忽略需要外部服務的測試）
          python -m pytest tests/ -v --disable-warnings \
            --ignore=tests/storage/test_audio_storage_service.py \
            --ignore=tests/therapist/test_therapist_service.py \
            -k "not test_send_email"

      - name: Generate test coverage report
        run: |
          pip install coverage
          coverage run -m pytest tests/ \
            --ignore=tests/storage/test_audio_storage_service.py \
            --ignore=tests/therapist/test_therapist_service.py \
            -k "not test_send_email"
          coverage report --show-missing
          coverage xml

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # 程式碼品質檢查 Job - 在所有分支的推送都會執行
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy

      - name: Check code formatting with Black
        run: black --check --diff src/ tests/

      - name: Check import sorting with isort
        run: isort --check-only --diff src/ tests/

      - name: Lint with flake8
        run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Type checking with mypy (optional)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true

  # Docker 構建和推送 Job - 只有在 main 分支且測試通過後才執行
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]  # 依賴測試和代碼品質檢查
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: sindy0514/vocalborn-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}
